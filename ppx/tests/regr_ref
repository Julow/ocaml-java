# error_2_class_param.ml
[%%ocaml.error ;;"Expecting object"
  ;;""]
# error_constructor_return.ml
[%%ocaml.error ;;"Constructor must returns `_'"
  ;;""]
# error_constructor_return_2.ml
[%%ocaml.error ;;"Constructor must returns `_'"
  ;;""]
# error_field_any.ml
[%%ocaml.error ;;"Unsupported type"
  ;;""]
# error_field_missing_type.ml
[%%ocaml.error ;;"Expecting field type"
  ;;""]
# error_field_unit.ml
[%%ocaml.error ;;"This type cannot be used here"
  ;;""]
# error_field_unsupported_type.ml
[%%ocaml.error ;;"Unsupported type"
  ;;""]
# error_meth_any_arg.ml
[%%ocaml.error ;;"Unsupported type"
  ;;""]
# error_meth_any_return.ml
[%%ocaml.error ;;"Unsupported type"
  ;;""]
# error_meth_any_return_2.ml
[%%ocaml.error ;;"Unsupported type"
  ;;""]
# error_missing_classpath.ml
[%%ocaml.error ;;"Expecting Java class path"
  ;;""]
# error_missing_meth_type.ml
[%%ocaml.error ;;"Expecting Java method name"
  ;;""]
# error_not_classpath.ml
[%%ocaml.error ;;"Expecting Java class path"
  ;;""]
# error_not_meth_name.ml
[%%ocaml.error ;;"Expecting Java method name"
  ;;""]
# error_override.ml
[%%ocaml.error ;;"Override method"
  ;;""]
# error_private.ml
[%%ocaml.error ;;"Private method"
  ;;""]
# error_self.ml
[%%ocaml.error ;;"self is not allowed"
  ;;""]
# error_unit_arg.ml
[%%ocaml.error ;;"This type cannot be used here"
  ;;""]
# error_virtual.ml
[%%ocaml.error ;;"Virtual method"
  ;;""]
# ok.ml
module A :
  sig
    type c = [ `a_A ]
    type 'a t' = ([> c] as 'a) Java.obj
    type t = c Java.obj
    val __class_name : unit -> string
    val of_obj : 'a Java.obj -> t
    val a : _ t' -> unit
  end =
  struct
    type c = [ `a_A ]
    type 'a t' = ([> c] as 'a) Java.obj
    type t = c Java.obj
    let __class_name () = "a/A"
    let __cls = Jclass.find_class "a/A"
    external of_obj_unsafe : 'a Java.obj -> t = "%identity"
    let of_obj obj =
      if Java.instanceof obj __cls
      then of_obj_unsafe obj
      else failwith "of_obj"
    let __0 = Jclass.get_meth __cls "a" "()V"
    let a obj = Java.call_void obj __0
  end 
module Test :
  sig
    type c = [ `test_Test  | A.c | B.c | C.c]
    type 'a t' = ([> c] as 'a) Java.obj
    type t = c Java.obj
    val __class_name : unit -> string
    val of_obj : 'a Java.obj -> t
    val get'a : _ t' -> A.t
    val get'b : _ t' -> test option option
    val set'b : _ t' -> test option option -> unit
    val get'c : unit -> int
    val set'c : int -> unit
    val a : _ t' -> _ A.t' -> A.t
    val b : _ t' -> unit
    val c :
      _ t' ->
        int ->
          bool ->
            int ->
              int ->
                Int32.t ->
                  Int64.t ->
                    char ->
                      float ->
                        float ->
                          string ->
                            string option ->
                              ((a * b) -> c) ->
                                (a b c * [> `D of e ]) option -> unit
    val d : _ t' -> _ t' -> t
    val f : _ t' -> unit
    val g : _ Abc.Def.t' -> _ Ghi.Jkl.Mno.t' -> Pqr.t
    val h :
      _ t' ->
        int Jarray.t -> int Jarray.t Jarray.t option -> int Java.obj Jarray.t
    val i :
      _ t' ->
        int array Jarray.jvalue Jarray.t Jarray.t Jarray.t Jarray.t option ->
          Jarray.jbyte Jarray.t ->
            Jarray.jshort Jarray.t option -> Jarray.jdouble Jarray.t Jarray.t
    val j : _ t' -> _ Java.obj -> int
    val create_default : unit -> t
    val create : _ A.t' -> test -> int -> t
  end =
  struct
    type c = [ `test_Test  | A.c | B.c | C.c]
    type 'a t' = ([> c] as 'a) Java.obj
    type t = c Java.obj
    let __class_name () = "test/Test"
    let __cls = Jclass.find_class "test/Test"
    external of_obj_unsafe : 'a Java.obj -> t = "%identity"
    let of_obj obj =
      if Java.instanceof obj __cls
      then of_obj_unsafe obj
      else failwith "of_obj"
    let __0 =
      Jclass.get_constructor __cls
        ("(L" ^ ((A.__class_name ()) ^ ";Ljuloo/javacaml/Value;I)V"))
    let __1 = Jclass.get_constructor __cls "()V"
    let __2 = Jclass.get_meth __cls "j" "(Ljava/lang/Object;)I"
    let __3 = Jclass.get_meth __cls "i" "([[[[Ljuloo/javacaml/Value;[B[S)[[D"
    let __4 = Jclass.get_meth __cls "h" "([I[[I)[Ljava/lang/Object;"
    let __5 =
      Jclass.get_meth_static __cls "g"
        ("(L" ^
           ((Abc.Def.__class_name ()) ^
              (";L" ^
                 ((Ghi.Jkl.Mno.__class_name ()) ^
                    (";)L" ^ ((Pqr.__class_name ()) ^ ";"))))))
    let __6 = Jclass.get_meth_static __cls "f" "(Ltest/Test;)V"
    let __7 = Jclass.get_meth __cls "d" "(Ltest/Test;)Ltest/Test;"
    let __8 =
      Jclass.get_meth __cls "c"
        "(IZBSIJCFDLjava/lang/String;Ljava/lang/String;Ljuloo/javacaml/Value;Ljuloo/javacaml/Value;)V"
    let __9 = Jclass.get_meth __cls "b" "()V"
    let __10 =
      Jclass.get_meth __cls "a"
        ("(L" ^ ((A.__class_name ()) ^ (";)L" ^ ((A.__class_name ()) ^ ";"))))
    let __11 = Jclass.get_field_static __cls "c" "I"
    let __12 = Jclass.get_field __cls "b" "Ljuloo/javacaml/Value;"
    let __13 = Jclass.get_field __cls "a" ("L" ^ ((A.__class_name ()) ^ ";"))
    let get'a obj = Java.read_field_object obj __13
    let get'b obj = Java.read_field_value_opt obj __12
    let set'b obj v = Java.write_field_value_opt obj __12 v
    let get'c () = Java.read_field_static_int __cls __11
    let set'c v = Java.write_field_static_int __cls __11 v
    let a obj x0 = Java.push_object x0; Java.call_object obj __10
    let b obj = Java.call_void obj __9
    let c obj x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 =
      Java.push_int x0;
      Java.push_bool x1;
      Java.push_byte x2;
      Java.push_short x3;
      Java.push_int32 x4;
      Java.push_long x5;
      Java.push_char x6;
      Java.push_float x7;
      Java.push_double x8;
      Java.push_string x9;
      Java.push_string_opt x10;
      Java.push_value x11;
      Java.push_value_opt x12;
      Java.call_void obj __8
    let d obj x0 = Java.push_object x0; Java.call_object obj __7
    let f x0 = Java.push_object x0; Java.call_static_void __cls __6
    let g x0 x1 =
      Java.push_object x0;
      Java.push_object x1;
      Java.call_static_object __cls __5
    let h obj x0 x1 =
      Java.push_array x0; Java.push_array_opt x1; Java.call_array obj __4
    let i obj x0 x1 x2 =
      Java.push_array_opt x0;
      Java.push_array x1;
      Java.push_array_opt x2;
      Java.call_array obj __3
    let j obj x0 = Java.push_object x0; Java.call_int obj __2
    let create_default () = Java.new_ __cls __1
    let create x0 x1 x2 =
      Java.push_object x0;
      Java.push_value x1;
      Java.push_int x2;
      Java.new_ __cls __0
  end 
module rec
  String_builder:sig
                   type c = [ `java_lang_StringBuilder ]
                   type 'a t' = ([> c] as 'a) Java.obj
                   type t = c Java.obj
                   val __class_name : unit -> string
                   val of_obj : 'a Java.obj -> t
                   val create : unit -> t
                   val to_string : _ t' -> Jstring.t
                 end =
  struct
    type c = [ `java_lang_StringBuilder ]
    type 'a t' = ([> c] as 'a) Java.obj
    type t = c Java.obj
    let __class_name () = "java/lang/StringBuilder"
    let __cls = Jclass.find_class "java/lang/StringBuilder"
    external of_obj_unsafe : 'a Java.obj -> t = "%identity"
    let of_obj obj =
      if Java.instanceof obj __cls
      then of_obj_unsafe obj
      else failwith "of_obj"
    let __0 = Jclass.get_meth __cls "toString" "()Ljava/lang/String;"
    let __1 = Jclass.get_constructor __cls "()V"
    let create () = Java.new_ __cls __1
    let to_string obj = Java.call_object obj __0
  end
 and
  Jstring:sig
            type c = [ `java_lang_String ]
            type 'a t' = ([> c] as 'a) Java.obj
            type t = c Java.obj
            val __class_name : unit -> string
            val of_obj : 'a Java.obj -> t
            val of_builder : _ String_builder.t' -> t
            val to_string : _ t' -> string
          end =
  struct
    type c = [ `java_lang_String ]
    type 'a t' = ([> c] as 'a) Java.obj
    type t = c Java.obj
    let __class_name () = "java/lang/String"
    let __cls = Jclass.find_class "java/lang/String"
    external of_obj_unsafe : 'a Java.obj -> t = "%identity"
    let of_obj obj =
      if Java.instanceof obj __cls
      then of_obj_unsafe obj
      else failwith "of_obj"
    let __0 = Jclass.get_meth __cls "toString" "()Ljava/lang/String;"
    let __1 = Jclass.get_constructor __cls "(Ljava/lang/StringBuilder;)V"
    let of_builder x0 = Java.push_object x0; Java.new_ __cls __1
    let to_string obj = Java.call_string obj __0
  end
module Jfloat :
  sig
    type c = [ `java_lang_Float ]
    type 'a t' = ([> c] as 'a) Java.obj
    type t = c Java.obj
    val __class_name : unit -> string
    val of_obj : 'a Java.obj -> t
    val float_value : _ t' -> float
    val of_string : _ Jstring.t' -> t
  end =
  struct
    type c = [ `java_lang_Float ]
    type 'a t' = ([> c] as 'a) Java.obj
    type t = c Java.obj
    let __class_name () = "java/lang/Float"
    let __cls = Jclass.find_class "java/lang/Float"
    external of_obj_unsafe : 'a Java.obj -> t = "%identity"
    let of_obj obj =
      if Java.instanceof obj __cls
      then of_obj_unsafe obj
      else failwith "of_obj"
    let __0 =
      Jclass.get_meth_static __cls "valueOf"
        ("(L" ^ ((Jstring.__class_name ()) ^ ";)Ljava/lang/Float;"))
    let __1 = Jclass.get_meth __cls "floatValue" "()F"
    let float_value obj = Java.call_float obj __1
    let of_string x0 = Java.push_object x0; Java.call_static_object __cls __0
  end 
